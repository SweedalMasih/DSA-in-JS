//this class is used to represent each element in the linked list
class Node {
  constructor(data) {
    this.data = data;
    this.next = null;
  }
}

// this class is used to represent the linked list
class LinkedList {
  constructor() {
    this.head = null;
  }

  // this method will be used to add a new node at the end of linked list.
  push(data) {
    const newNode = new Node(data);

    if (!this.head) {
      this.head = newNode;
      return;
    }

    let current = this.head;
    while (current.next) {
      current = current.next;
    }

    current.next = newNode;
  }

  pop() {
    if (!this.head) {
      return;
    }

    if (!this.head.next) {
      this.head = null;
      return;
    }

    let current = this.head;
    let previous = null;
    while (current.next) {
      previous = current;
      current = current.next;
    }

    previous.next = null;
  }

  shift() {
    if (!this.head) {
      return;
    }

    if (!this.head.next) {
      this.head = null;
      return;
    }

    this.head = this.head.next;
  }

  unshift(data) {
    const newNode = new Node(data);

    if (!this.head) {
      this.head = newNode;
      return;
    }

    newNode.next = this.head;
    this.head = newNode;
  }

  printElements() {
    if (!this.head) {
      return;
    }

    let current = this.head;
    let i = 0;
    while (current) {
      i++;
      console.log(current.data, i, current.next);
      current = current.next;
    }

    console.log({ current });
  }

  // Method to get the data at a specific index in the linked list
  get(index) {
    if (index < 0 || !this.head) {
      return undefined;
    }

    let current = this.head;
    for (let i = 0; i < index; i++) {
      if (!current.next) {
        return undefined;
      }
      current = current.next;
    }

    return current.data;
  }

  // Method to set the value at a specific index in the linked list
  set(index, value) {
    if (index < 0 || !this.head) {
      return;
    }

    let current = this.head;
    for (let i = 0; i < index; i++) {
      if (!current.next) {
        return;
      }
      current = current.next;
    }

    current.data = value;
  }

  insertNewNode(index, data) {
    const newNode = new Node(data);
    let current = this.head;
    let remainingLinkedList;

    if (index === 0) {
      return;
    }

    if (!this.head) {
      this.head = newNode;
    }

    if (index === 1) {
      remainingLinkedList = current;
      console.log(remainingLinkedList);
      newNode.next = remainingLinkedList;
      this.head = newNode;
      return;
    }

    for (let i = 1; i < index; i++) {
      current = current.next;
      remainingLinkedList = current.next;
    }

    newNode.next = remainingLinkedList;
    current.next = newNode;
  }
}

const linkedList = new LinkedList();

linkedList.push(1);
linkedList.push(2);
linkedList.push(3);
linkedList.push(4);
linkedList.push(5);
linkedList.getData(3);
linkedList.insertNewNode(5, 10);
linkedList.printElements();
linkedList.unshift(0);
linkedList.shift();
linkedList.shift();
linkedList.shift();
linkedList.shift();
